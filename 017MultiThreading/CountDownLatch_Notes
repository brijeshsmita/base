CountDownLatch is a synchronization aid that allows one 
or more threads to wait until a set of operations being performed
 in other threads completes. 
 CountDownLatch was introduced with JDK 1.5 along with other 
 concurrent utilities like CyclicBarrier, Semaphore, 
 ConcurrentHashMap and BlockingQueue in java.util.concurrent package. 
 This class enables a java thread to wait until other set of 
 threads completes their tasks. e.g. Application’s main thread 
 want to wait, till other service threads which are responsible 
 for starting framework services have completed started all services.

CountDownLatch works by having a counter initialized with number
of threads, which is decremented each time a thread complete 
its execution. When count reaches to zero, it means all threads 
have completed their execution, 
and thread waiting on latch resume the execution.

Pseudo code for CountDownLatch can be written like this:

//Main thread start
//Create CountDownLatch for N threads
//Create and start N threads
//Main thread wait on latch
//N threads completes there tasks are returns
//Main thread resume execution


What is CountDownLatch in Java
CountDownLatch in Java is a kind of synchronizer which allows one 
Thread  to wait for one or more Threads before starts processing. 
This is very crucial requirement and often needed in server side 
core Java application and having this functionality built-in as
CountDownLatch greatly simplifies the development. 
CountDownLatch in Java is introduced on Java 5 along with 
other concurrent utilities like CyclicBarrier, Semaphore, 
ConcurrentHashMap and BlockingQueue in java.util.concurrent package.
here we will  what is CountDownLatch in Java, How CountDownLatch works 
in Java, an example of CountDownLatch in Java and finally some worth 
noting points about this concurrent utility. You can also implement
 same functionality using  wait and notify mechanism in Java but it
  requires lot of code and getting it write in first attempt is tricky,
    With CountDownLatch it can  be done in just few lines. 
    CountDownLatch also allows flexibility on number of thread for 
    which main thread should wait, It can wait for one thread or n 
    number of thread, there is not much change on code.


