When to use CyclicBarrier in Java
Given the nature of CyclicBarrier it can be very handy to implement
 map reduce kind of task similar to fork-join framework of Java 7,
 where a big task is broker down into smaller pieces and
 to complete the task you need output from individual small task 
 e.g. to count population of India you can have 4 threads 
 which counts population from North, South, East and West 
 and once complete they can wait for each other, 
 When last thread completed there task, 
 Main thread or any other thread can add result 
 from each zone and print total population. 
 You can use CyclicBarrier in Java :

1) To implement multi player game which can not begin 
until all player has joined.
2) Perform lengthy calculation by breaking it into 
smaller individual tasks, In general to implement Map reduce technique.

Important point of CyclicBarrier in Java
1. CyclicBarrier can perform a completion task once all thread reaches to barrier, This can be provided while creating CyclicBarrier.

2. If CyclicBarrier is initialized with 3 parties means 3 thread needs to call await method to break the barrier.
3. Thread will block on await() until all parties reaches to barrier, another thread interrupt or await timed out.
4. If another thread interrupt the thread which is waiting on barrier it will throw BrokernBarrierException as shown below:

java.util.concurrent.BrokenBarrierException
        at java.util.concurrent.CyclicBarrier.dowait(CyclicBarrier.java:172)
        at java.util.concurrent.CyclicBarrier.await(CyclicBarrier.java:327)

5.CyclicBarrier.reset() put Barrier on its initial state, other thread which is waiting or not yet reached barrier will terminate with java.util.concurrent.BrokenBarrierException.

That's all on  What is CyclicBarrier in Java , When to use CyclicBarrier in Java and a Simple Example of How to use CyclicBarrier in Java . We have also seen difference between CountDownLatch and CyclicBarrier in Java and got some idea where we can use CyclicBarrier in Java Concurrent code.


